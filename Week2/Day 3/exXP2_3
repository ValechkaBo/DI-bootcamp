# Exercise 1: Currencies

#CODE

# class Currency:
#     def __init__(self, currency, amount):
#         self.currency = currency
#         self.amount = amount
#     def __str__(self):
#         return f'{self.amount} {self.currency}s'
#     def __int__(self):
#         return self.amount
#     def __repr__(self):
#         return f'{self.amount} {self.currency}s'
#     def __add__(self, other):
#         if isinstance(other, (int, float)):
#             return self.amount + other
#         elif isinstance(other, Currency):
#              if other.currency != self.currency:
#                 raise TypeError("Cannot add between Currency type <dollar> and <shekel>")
#         return  Currency(self.currency, self.amount + other.amount)
        
#     def __iadd__(self, other):
#         if isinstance(other, (int, float)):
#                 self.amount += other 
#         elif isinstance(other, Currency):
#             if other.currency != self.currency:
#                 raise TypeError("Cannot add between Currency type <dollar> and <shekel>")
#             self.amount += other.amount
#         return self
        
         
        
# c1 = Currency('dollar', 5)
# c2 = Currency('dollar', 10)
# c3 = Currency('shekel', 1)
# c4 = Currency('shekel', 10)


# print(str(c1))
# print(c1)
# print(int(c1))
# c1+5
# print(c1)
# print(c1 + c2)
# print(c1)
# c1 += 5
# print(c1)
# c1 += c2
# print(c1)
# print(c1 + c3)


#EX 2 
# Exercise 2: Import
# Instructions
# In a file named func.py create a function that sum 2 numbers, and prints the result
# In a file named exercise_one.py import the function and call it to print the result
# Hint: You can use the the following syntaxes:

#look in files func and exercise_one

#EX 3 
# Exercise 3: String module
# Instructions
# Generate random String of length 5
# Note: String must be the combination of the UPPER case and lower case letters only. No numbers and a special symbol.
# Hint: use the string module

#CODE
# import random
# import string
# def generated_str(len=5):
#     char = string.ascii_letters
#     random_str = ''.join(random.choice(char) for _ in range(len))
#     return random_str
# print(generated_str())


#EX 5
# Exercise 4 : Current Date
# Instructions
# Create a function that displays the current date.
# Hint : Use the datetime module.

#CODE

# from datetime import date

# def current_date():
#     today = date.today()
#     return today
# print(current_date())


# Exercise 5 : Amount of time left until January 1st
# Instructions
# Create a function that displays the amount of time left from now until January 1st.
# (Example: the 1st of January is in 10 days and 10:34:01hours).

#CODE
# from datetime import datetime 
# new_year = datetime(2025,1,1)
# def lived_days(new_year):
#         now = datetime.now()
#         rest_of_time = (new_year - now)
#         return rest_of_time
# print(lived_days(new_year))



#Exercise 6 : Birthday and minutes
# Instructions
# Create a function that accepts a birthdate as an argument (in the format of your choice), then displays a message stating how many minutes the user lived in his life.

#CODE
# from datetime import  datetime

# def min_live(birth):
#     minutes_of_live = datetime.now()- birth
#     return int(minutes_of_live.total_seconds() / 60)
# birth = datetime(1999,5,5)
# print(min_live(birth))

# Exercise 7 : Faker Module
# Instructions
# Install the faker module, and take a look at the documentation and learn how to properly implement faker in your code.
# Create an empty list called users. Tip: It should be a list of dictionaries.
# Create a function that adds new dictionaries to the users list. Each user has the following keys: name, adress, langage_code. Use faker to populate them with fake data.

#CODE

# from faker import Faker
# fake = Faker ()
# users = list(dict())

# def fake_user(users, count):
#     for _ in range(count):
#         user = {'name': {fake.name()},
#             "adress": {fake.address()},
#              "langage_code": {fake.language_code()}
#              }
#         users.append(user)
#     return users
# print(fake_user(users, 10))